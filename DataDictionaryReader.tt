<#@ Assembly Name="System.Core.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#+ 
    public class DataDictionaryReader
    {
        public DataDictionaryReader(string dataDictionaryPath)
        {
            Path = dataDictionaryPath;
        }
        //search sub directorys for DataDictionary file
        
        public string Path;
        public string DBVersion;
        public List<Table> Read()
        {
            StreamReader reader = new StreamReader(Path);
            reader.ReadLine(); //skip header

            String[] row = reader.ReadLine().Split(',');
            DBVersion = row[16];//read database version

            row = reader.ReadLine().Split(',');
            Table currentTable = new Table();
            currentTable.ReadLine(row);
            string line;
            while((line = reader.ReadLine()) != null)
            {
                row = line.Split(',');
                currentTable = currentTable.ReadLine(row);
            }

            return Table.TableList;
        }
    }

    public class Table
    {
        public static List<Table> TableList = new List<Table>();

        public Table() 
        {
            TableList = new List<Table>();
        }

        public Table(String tableName)
        {
            Name = tableName;
        }

		public bool IsDepreciated = true;
        public String Name = null;
        public List<Field> Fields = new List<Field>();
        public List<Field> DataFields = new List<Field>();
        public List<Field> UniqueFields = new List<Field>();
        public List<Field> PKFields = new List<Field>();
        public List<Field> FKFields = new List<Field>();
        public List<Field> AuditFields = new List<Field>();
        public Field ModifiedDate;
		public bool hasCreatedBy = false;

        public int Table_Ord = 1;
        public int Column_Ord = 2;
        public int Type_Ord = 3;
        public int PK_Ord = 4;
        public int AutoI_Ord = 5;
        public int Unique_Ord = 6;
        public int FK_Ord = 7;
        public int Ref_Ord = 8;
        public int Req_Ord = 9;
        public int Default_Ord= 10;
        public int NotNull_Ord = 11;
        public int Min_Ord = 12;
        public int Max_Ord = 13;
        public int Values_Ord = 14;
        public int ErrorMessage_Ord = 15;
        public int Description_Ord = 16;
        public int Depreciated_Ord = 18;

        public Table ReadLine(String[] row)
        {
			
            if (Name == null) 
            { 
                Name = row[Table_Ord]; 
                TableList.Add(this);
            }
            else if (Name != row[Table_Ord])
            {
                Table newTable = new Table(row[Table_Ord]);
                newTable.ReadLine(row);
                TableList.Add( newTable);
                return newTable;
            }
            //if(IsMarked(row[Depreciated_Ord])) { return this; }

            Field newField = new Field
                {
                    Name = row[Column_Ord],
                    DBType = MapDBType(row[Type_Ord]),
                    NullableType = MapAccessableType(row[Type_Ord], IsMarked(row[FK_Ord])),
                    Type = MapType(row[Type_Ord]),
                    IsPK = IsMarked(row[PK_Ord]),
                    IsAutoI = IsMarked(row[AutoI_Ord]),
                    IsUnique = IsMarked(row[Unique_Ord]),
                    IsFK = IsMarked(row[FK_Ord]),
                    IsReq = IsMarked(row[Req_Ord]),
                    DefaultValue = GetDefaultValue(row[Default_Ord], row[Type_Ord]),
                    NotNull = IsMarked(row[NotNull_Ord]),
                    Min = (!String.IsNullOrEmpty(row[Min_Ord]))? (float?)Convert.ToSingle(row[Min_Ord]): null,
                    Max = (!String.IsNullOrEmpty(row[Max_Ord]))? (float?)Convert.ToSingle(row[Max_Ord]): null,
                    Values = row[Values_Ord],
                    ErrorMessage = row[ErrorMessage_Ord],
                    Description = row[Description_Ord],
                    IsDepreciated = IsMarked(row[Depreciated_Ord])
                };
            if (newField.Name == "CreatedBy") { this.hasCreatedBy = true; }
            if (newField.IsFK == true) { newField.Ref = row[Ref_Ord]; }

            if (newField.Name == "ModifiedDate") { this.ModifiedDate = newField; }
            
            if(newField.IsPK == true) { PKFields.Add(newField); }
            else if ( newField.IsFK == true) { FKFields.Add(newField); }
            else { DataFields.Add(newField); }

            if ( newField.IsUnique == true ) { UniqueFields.Add(newField); }
            Fields.Add(newField);

            if(newField.Min != null || newField.Max != null || !String.IsNullOrEmpty(newField.Values))
            {
                AuditFields.Add(newField);
            }
            
            if(newField.IsDepreciated == false)
            {
				this.IsDepreciated = false;
			}
            return this;
        }

        private bool IsMarked(String s)
        {
            s = s.Trim();
            return s == "X";
        }

        private string GetDefaultValue(string defaultVal, string type)
        {
            if(!string.IsNullOrEmpty(defaultVal))
            {
                return defaultVal.Replace("\"\"\"", "\"");// replace """ with "
            }
            //if(type.StartsWith("ENUM:"))
			//{
			//	return "0";
			//}
            switch (type)
            {
                case "INTEGER": { return "0L"; }
                case "TEXT": { return null; }
                case "REAL": { return "0.0f"; }
                case "DATETIME": { return null; }
                case "BOOLEAN": { return "false"; }
                case "BLOB" : { return null; }
                case "DOUBLE" : { return "0.0"; }
            }
            return null;

        }

		//converts type in data dictionary to field type that will be used in the dataBase
		private string MapDBType(string s)
		{
			if(s.StartsWith("ENUM:"))
			{
				return "TEXT";
			}
			return s;
		
		}
		
		//converts type in data dictionary to the type that will be used for the coresponding dataObject property
        private string MapAccessableType(string s, bool isFK)
        {
			if(isFK)
			{
				return "long?";
			}
		    if (s.StartsWith("ENUM:"))
		    {
			    return "CruiseDAL.Enums." + s.Substring("ENUM:".Length);//return the text after "ENUM:"
		    }
            switch (s)
            {
                case "INTEGER": { return "Int64"; }
                case "TEXT": { return "String"; }
                case "REAL": { return "float"; }
                case "DATETIME": { return "String"; }
                case "BOOLEAN": { return "bool"; }
                case "BLOB" : { return "byte[]"; }
                case "DOUBLE" : { return "Double"; }
            }
            return null;
        }

		//Converts dataDictionary type to string representation of the type to be used misc. purposes 
        private string MapType(string s)
        {
			if(s.StartsWith("ENUM:"))
			{
				return s;
			}
            switch (s)
            {
                case "INTEGER": { return "Int64"; }
                case "TEXT": { return "String"; }
                case "REAL": { return "Float"; }
                case "DATETIME": { return "String"; }
                case "BOOLEAN": { return "Bool"; }
                case "BLOB" : { return "Byte"; }
                case "DOUBLE" : { return "Double"; }
            }
            return null;
        }
    }

    public class Field
    {
        public Field() { }
        public string Name { get; set; }
        public string DBType { get; set; }
        public string NullableType { get; set; }
        public string Type { get; set; }
        public bool IsPK { get; set; }
        public bool IsAutoI { get; set; }
        public bool IsUnique { get; set; }
        public bool IsFK { get; set; }
        public string Ref { get; set; }
        public bool IsReq { get; set; }
        public string DefaultValue { get; set; }
        public bool NotNull { get; set; }
        public Nullable<double> Min { get; set; }
        public Nullable<double> Max { get; set; }
        public string Values { get; set; }
        public string ErrorMessage {get; set; }
        public string Description { get; set; }
        public bool IsDepreciated { get; set; }
    }//end class Field
#>