<#@ template language="C#v3.5"  debug="true" hostSpecific="true" #>
<#@ output extension=".sql" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly Name="C:\tmp\CruiseDAL.CodeGenEngine.exe" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="FMSCORM.CodeGenEngine" #> 
<#
DataDictionaryReader dr = new DataDictionaryReader();

ICollection<Table> TableList = dr.AllTables.Values;
#>

<#
	
	foreach(TableCollection tc in dr.TableCollections)
	{
		Write("--" + tc.Name + "--\r\n");
		foreach (Table curTable in tc)
		{
			Write("--" + curTable.Name + "--\r\n");
			MakeTriggers(curTable);
	        
		}//end foreach
    }


#>


<#+
    public void MakeTriggers(Table table)
    {		
		if(table.TrackModified)
		{	

#>
CREATE TRIGGER OnInserted<#= table.Name#>
AFTER INSERT 
ON <#= table.Name #>
BEGIN
	UPDATE <#= table.Name #> 
	SET CreatedDate = datetime(current_timestamp, 'localtime') 
	WHERE rowID = new.rowID; 
END; 
 
CREATE TRIGGER OnUpdate<#= table.Name#> 
AFTER UPDATE OF <#= table.ListTrackedFields() #> 
ON <#= table.Name #> 
BEGIN
	UPDATE <#= table.Name #> 
	SET ModifiedDate = datetime(current_timestamp, 'localtime') 
	WHERE rowID = new.rowID; 
END;

<#+
		}
		
		if(table.TrackRowVersion)
		{
#> 
CREATE TRIGGER OnUpdate<#=table.Name#>RowVersion AFTER UPDATE 
OF <#= table.ListTrackedFields() #> 
ON <#= table.Name#>
BEGIN 
	UPDATE <#=table.Name#> SET RowVersion = OLD.RowVersion + 1 
	WHERE RowID = OLD.RowID;
END;
 
<#+ 
		}	
		
		if(table.DeleteMethod == DeleteMethodType.Tombstone || table.DeleteMethod == DeleteMethodType.TombstoneGUID)
		{
			//when a record is deleted we are going to store all foreign key values in a field called Data.
			List<string> colEprs = new List<String>();
			List<string> colNames = new List<string>();
			
			
			foreach(Field f in table.UniqueFields)
			{
				colNames.Add(f.Name);
				colEprs.Add("quote(OLD." + f.Name + ")");
				//dataCols.Add(String.Format("'{0}=' || ifnull(OLD.{0}, 'null') || ';'", f.Name));
			} 
			String makeData  = "''";//base case, no fields
			if(colNames.Count > 0)
			{
				//makeData  = String.Join(" || ", dataCols.ToArray());
				//makeData = "(" + makeData + ")";
				makeData = "'(" + String.Join(", ", colNames.ToArray()) + ") VALUES (' || " + String.Join(" || ',' || ", colEprs.ToArray()) + " ||')'";
			}
			

			if(table.DeleteMethod == DeleteMethodType.Tombstone)
			{
#>
CREATE TRIGGER OnDelete<#= table.Name#> AFTER DELETE ON <#= table.Name#>  
BEGIN
	INSERT INTO <#= FMSCORM.CodeGenEngine.Constants.TOMBSTONE_TABLENAME#> 
	(RecordID, TableName, Data, DeletedDate) 
	VALUES 
	(OLD.rowID, '<#= table.Name#>', <#=makeData#>, datetime(current_timestamp, 'localtime')); 
END;
			
<#+
			}
			else if(table.DeleteMethod == DeleteMethodType.TombstoneGUID)
			{
#>
CREATE TRIGGER OnDelete<#= table.Name#> AFTER DELETE ON <#= table.Name#>  
BEGIN
	INSERT INTO <#= FMSCORM.CodeGenEngine.Constants.TOMBSTONE_TABLENAME#> 
	(RecordID, RecordGUID, TableName, Data, DeletedDate) 
	VALUES 
	(OLD.rowID, OLD.<#=table.Name#>_GUID, '<#= table.Name#>', <#=makeData#>, datetime(current_timestamp, 'localtime')); 
END;
<#+
			
			}
		}
		
		
		
     }//end feature method MakeTriggers     
#>