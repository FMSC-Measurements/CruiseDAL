<#@ template language="C#"  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly Name="C:\tmp\CruiseDAL.CodeGenEngine.exe" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="FMSCORM.CodeGenEngine" #> 
<#
DataDictionaryReader dr = new DataDictionaryReader();

ICollection<Table> TableList = dr.AllTables.Values;
#>
using System;

namespace CruiseDAL.Schema
{
	public static partial class Schema
	{

		public static string CREATE_TABLES = 
		@"
<#
	
	foreach(TableCollection tc in dr.TableCollections)
	{
		Write("--" + tc.Name + "--\r\n");
		foreach (Table curTable in tc)
		{
			MakeCreateTable(curTable);
	        
	        
			//MakeTriggers(curTable);
	        
		}//end foreach
    }


#>

CREATE TABLE <#= FMSCORM.CodeGenEngine.Constants.TOMBSTONE_TABLENAME#> (
RecordID INTEGER ,
RecordGUID TEXT, 
TableName TEXT NOT NULL COLLATE NOCASE,
Data TEXT, 
DeletedDate DATETIME NON NULL);" +

CREATE_TABLE_TALLY_LEDGER_COMMAND +



@"CREATE VIEW CountTree_View AS 
SELECT Stratum.Code as StratumCode,
Stratum.Method as Method, 
SampleGroup.Code as SampleGroupCode,
SampleGroup.PrimaryProduct as PrimaryProduct, 
CountTree.* 
FROM CountTree JOIN SampleGroup USING (SampleGroup_CN) JOIN Stratum USING (Stratum_CN);
 
CREATE VIEW StratumAcres_View AS 
SELECT CuttingUnit.Code as CuttingUnitCode, 
Stratum.Code as StratumCode, 
ifnull(Area, CuttingUnit.Area) as Area, 
CuttingUnitStratum.* 
FROM CuttingUnitStratum 
JOIN CuttingUnit USING (CuttingUnit_CN) 
JOIN Stratum USING (Stratum_CN);" +

CREATE_VIEW_TALLY_POPULATION +

@"
INSERT INTO Globals (Block, Key, Value) VALUES ('Database', 'Version', '<#=dr.DBVersion#>'); 
PRAGMA user_version = <#=dr.SchemaVersion#>;";

	internal const string CREATE_TABLE_TALLY_LEDGER_COMMAND =
		"CREATE TABLE TallyLedger ( " +
			"TallyLedgerID TEXT PRIMARY KEY, " +
			"UnitCode TEXT NOT NULL, " +
			"StratumCode TEXT NOT NULL, " +
			"SampleGroupCode TEXT NOT NULL, " +
			"PlotNumber INTEGER, " +
			"Species TEXT, " +
			"LiveDead TEXT, " +
			"TreeCount INTEGER NOT NULL, " +
			"KPI INTEGER Default 0, " +
			"ThreePRandomValue INTEGER Default 0, " +
			"Tree_GUID TEXT REFERENCES Tree (Tree_GUID) ON DELETE CASCADE, " +
			"TimeStamp TEXT DEFAULT (datetime('now', 'localtime')), " +
			"Signature TEXT, " +
			"Reason TEXT, " +
			"Remarks TEXT, " +
			"EntryType TEXT " +
		");";

	internal const string CREATE_VIEW_TALLY_POPULATION =  
		"CREATE VIEW TallyPopulation "+
		"( StratumCode, SampleGroupCode, Species, LiveDead, Description, HotKey) " +
		"AS " + 
		"SELECT Stratum.Code, SampleGroup.Code, TDV.Species, TDV.LiveDead, Tally.Description, Tally.HotKey " +
		"FROM CountTree " +
		"JOIN SampleGroup USING (SampleGroup_CN) " +
		"JOIN Stratum USING (Stratum_CN) " +
		"LEFT JOIN TreeDefaultValue AS TDV USING (TreeDefaultValue_CN) " +
		"JOIN Tally USING (Tally_CN) " +
		"GROUP BY SampleGroup_CN, ifnull(TreeDefaultValue_CN, '');";


	}//END CLASS
}//END NAMESPACE


<#+

    public void MakeCreateTable(Table table)
    {
#>
    CREATE TABLE <#=table.Name#> (
<#+
        List<String> cols = new List<String>();
        foreach (Field f in table.Fields)
        {
			
            string defaultOpt = "";
            if(!String.IsNullOrEmpty(f.DBDefault) && f.IsReq == false && f.IsPK == false && f.IsFK == false)
                {
                    defaultOpt= " Default " + f.DBDefault;
                }
            if(f.Type == "Bool")
                {
                    defaultOpt = " Default 0";
                }
                
            cols.Add(String.Format("\t\t\t\t{0} {1}{2}{3}{4}{5}{6}{7}", //col Name, type, is Primay key, is auto increment, references, not null, zero as default value for numbers
                f.Name, 
                f.DBType,
                (f.IsPK == true) ? " PRIMARY KEY" : "",
                (f.IsAutoI) ? " AUTOINCREMENT" :"",
                (f.IsFK)? " REFERENCES " + f.Ref : "",
                (f.IsReq) ? " NOT NULL":"",
				(f.IsTransitionalPK) ? " UNIQUE" : "",
                defaultOpt
                //(f.IsReq == false && f.IsPK == false && f.IsFK == false &&(f.DBType == "INTEGER" || f.DBType == "REAL" || f.DBType == "DOUBLE")) ? //use default value 0 and 0.0 if value is a integer 
                //    " Default " + (( f.DBType == "INTEGER" ) ? "0" : "0.0") : ""        //or floating point value, respectively
                    ));
       
        }
        if(table.TrackCreated)
        {
			cols.Add("\t\t\t\tCreatedBy TEXT DEFAULT 'none'");
			cols.Add("\t\t\t\tCreatedDate DateTime DEFAULT (datetime(current_timestamp, 'localtime')) ");
		}
		if(table.TrackModified)
		{
			cols.Add("\t\t\t\tModifiedBy TEXT ");
			cols.Add("\t\t\t\tModifiedDate DateTime ");
		}
		if(table.DeleteMethod == DeleteMethodType.Logical)
		{
			//cols.Add("\t\t\tDeletedDate DateTime ");
		}
		if(table.TrackMergeState)
		{
			//cols.Add("\t\t\t\tMergeState TEXT DEFAULT 'New'");
		}
		if(table.TrackRowVersion)
		{
			cols.Add("\t\t\t\tRowVersion INTEGER DEFAULT 0");
		}
        
        Write(String.Join(",\n", cols.ToArray()));

		if (table.UniqueFields.Count > 0)
		{
			var uniques = (from Field fld in table.UniqueFields select fld.Name).ToArray();
			Write(",\n\t\t\t\tUNIQUE (" + string.Join(", ", uniques) + ")");
		}
        WriteLine(");");
        WriteLine("");
    }//end feature method MakeCreateTable #>

