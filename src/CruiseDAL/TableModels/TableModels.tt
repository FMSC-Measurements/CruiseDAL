<#@ template language="C#" debug="True" hostspecific="True" #>
<#@ Assembly Name="C:\tmp\CruiseDAL.CodeGenEngine.exe" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="FMSCORM.CodeGenEngine" #>

<#
DataDictionaryReader dr = new DataDictionaryReader();

ICollection<Table> TableList = dr.AllTables.Values;
#>
#pragma warning disable RECS0001 //disable warning that class is partial with only one part

using System;
using System.Xml.Serialization;
using FMSC.ORM.EntityModel.Attributes;
using FMSC.ORM.EntityModel;
using FMSC.ORM.Core;
using CruiseDAL.Schema;

namespace CruiseDAL.DataObjects
{
<#
PushIndent("\t");

foreach(TableCollection tc in dr.TableCollections)
{
	WriteLine("#region " + tc.Name);
	foreach(Table curTable in tc)
	{
			if(curTable.IsDepreciated == true) { continue; }
			MakeClass(curTable);
	}
	WriteLine("#endregion");
}


PopIndent();
 #>
}




<#+
//----------------------------------Method: MakeClass------------------------------------------------------
public void MakeClass(Table table)
{#>
[EntitySource(SourceName = "<#=table.Name#>")]
public partial class <#=table.Name#>DO : DataObject
{
<#+  PushIndent("\t");#>
private static RowValidator _validator;

[XmlIgnore]
public new DAL DAL
{
	get { return (DAL)base.DAL; }
	set { base.DAL = value; }
}

[XmlIgnore]
public override RowValidator Validator
{
    get
    {
        return _validator;
    }
}


#region Ctor
static <#=table.Name#>DO()
{    
<#+
PushIndent("\t");
MakeInitializeRowValidator(table);
PopIndent();
#>
}

public <#=table.Name#>DO() {}

public <#=table.Name#>DO(<#=table.Name#>DO obj) : this()
{
    SetValues(obj);
}

public <#=table.Name#>DO(DatastoreRedux DAL) : base(DAL)
{}
#endregion
<#+     
		if(table.PKFields.Count > 0)
        {
			foreach(Field f in table.PKFields)
			{
				MakePrimaryKeyProperty(f);
			}
        }
		else
        {
			MakePrimaryKeyProperty(new Field(){Name = "RowID", IsPK = true, Type = "INTEGER"});
        }

        foreach(Field f in table.FKFields)
        {
            MakeForeignKey(f, table);
        }

        foreach(Field f in table.DataFields)
        {
			if(f.IsDepreciated) { continue; }
            MakeProperty(f, table, true);
        }
        
        MakeUtilProperties(table.TrackCreated, table.TrackModified, table.TrackRowVersion);

        MakeValidate(table);
        //MakeGetValidator(table);
        MakeSetValues(table);
        PopIndent();
        WriteLine("}");
 }
 //---------------------------------End Method: MakeClass


//MakeInitializeRowValidator
public void MakeInitializeRowValidator(Table table)
{
	WriteLine("_validator = new RowValidator();");

	foreach(Field f in table.Fields)
	{             
		if(f.IsDepreciated) { continue; }                  
		if (!string.IsNullOrEmpty(f.ErrorMessage))
		{
			WriteLine("_validator.Add(new FieldValidator(\"{0}\", \"{1}\", \"{2}\", {3}, {4}, {5}, {6}));", 
				f.Name, 
				table.Name, 
				f.ErrorMessage, 
				(f.Min!= null)? f.Min.ToString() : "double.MinValue" , 
				(f.Max != null)? f.Max.ToString() : "double.MinValue", 
				(f.IsReq)? "true" : "false", 
				(string.IsNullOrEmpty(f.Values)) ? "null" : '"' + f.Values + '"');
		}
		else if(f.IsReq)
		{
			WriteLine("_validator.Add(new NotNullRule(\"{0}\", \"{1}\", \"{2}\"));", 
				f.Name, 
				table.Name, 
				f.Name + " is Required" );
		}
    
	}
}


//----------------------------------Method: MakePrimaryKeyProperty------------------------------------------------------
public void MakePrimaryKeyProperty(Field field)
 {
            WriteLine("[XmlIgnore]");
			WriteLine("[PrimaryKeyField(Name = \"" + field.Name +"\")]");
            WriteLine("public Int64? {0}", field.Name);
            WriteLine("{");
            PushIndent("\t");
            WriteLine("get{ return base.rowID; }");
			WriteLine("set{ base.rowID = value; }");
            PopIndent();
            WriteLine("}");
}
//---------------------------------End Method: MakePrimaryKeyProperty


//----------------------------------Method: MakeValidate------------------------------------------------------
    public void MakeValidate(Table table)
    {
        WriteLine("protected override bool DoValidate()");
        WriteLine("{");
        PushIndent("\t");
        #>
if(ErrorCollection.ErrorsLoaded == false)
{
	this.ErrorCollection.PopulateErrorList();
}
<#+
        WriteLine("bool isValid = true;");
        foreach(Field f in table.DataFields)
        {
			if(f.IsDepreciated) { continue; } 
            WriteLine(String.Format("isValid = ValidateProperty(\"{0}\", this.{0}) && isValid;",f.Name));
        }
        foreach(Field f in table.FKFields)
        {
			//if(f.IsDepreciated) { continue; } 
            WriteLine(String.Format("isValid = ValidateProperty(\"{0}\", this.{0}) && isValid ;",f.Name));
        }
        
        WriteLine("return isValid;");
        PopIndent();
        WriteLine("}");
    }
//---------------------------------End Method: MakeValidate

//----------------------------------Method: MakeGetValidator------------------------------------------------------
public void MakeGetValidator(Table table)
{
#>
protected override RowValidator GetValidator()
{
    return DAL.GetTableValidator("<#=table.Name#>");
}
<#+
} 
//---------------------------------End Method: MakeGetValidator


//----------------------------------Method: MakeSetValues------------------------------------------------------
public void MakeSetValues(Table table) 
{

        WriteLine("public override void SetValues(DataObject obj)");
        WriteLine("{");
        PushIndent("\t");
        WriteLine("this.SetValues(obj as {0}DO);", table.Name);
        PopIndent();
        WriteLine("}");
        WriteLine("");
        WriteLine("public void SetValues({0}DO obj)", table.Name);
        WriteLine("{");
        PushIndent("\t");
        WriteLine("if(obj == null) { return; }");
        foreach(Field f in table.DataFields)
        {
			if(f.IsDepreciated) { continue; }
            WriteLine("{0} = obj.{0};", f.Name, table.Name);
        }
        PopIndent();
        WriteLine("}");
}
//---------------------------------End Method: MakeSetValues


//----------------------------------Method: MakeForeignKey------------------------------------------------------
public void MakeForeignKey(Field field, Table table)
{
    MakeProperty(field, table, false);
#>
public virtual <#=field.Ref#>DO Get<#=field.Ref#>()
{
    if(DAL == null) { return null; }
	if(this.<#=field.Name#> == null) { return null; }//  don't bother reading if identity is null
	return DAL.ReadSingleRow<<#=field.Ref#>DO>( this.<#=field.Name#>);
    //return DAL.ReadSingleRow<<#=field.Ref#>DO>(<#=field.Ref.ToUpper()#>._NAME, this.<#=field.Name#>);
}
 
private <#=field.Ref#>DO _<#=field.Ref.ToLower()#> = null;
[XmlIgnore]
public <#=field.Ref#>DO <#=field.Ref#>
{
    get
    {
        if(_<#=field.Ref.ToLower()#> == null)
        {
            _<#=field.Ref.ToLower()#> = Get<#=field.Ref#>();
        }
        return _<#=field.Ref.ToLower()#>;
    }
    set
    {
        if(_<#=field.Ref.ToLower()#> == value) { return; }
        _<#=field.Ref.ToLower()#> = value;
        <#=field.Name#> = (value != null) ? value.<#=field.Name#> : null;
    }
}
<#+} 
//---------------------------------End Method: MakeForeignKey


//----------------------------------Method: MakeProperty------------------------------------------------------
public void MakeProperty(Field field, Table table, bool isSerializable)
{
	string compareExpression = null;

	if(field.AccessableType.ToLower() == "float" || field.AccessableType.ToLower() == "double")
    {
		compareExpression = "Math.Abs(_" + field.Name.ToLower() + " - value) < " + field.AccessableType + ".Epsilon";
    }
	else
    {
		compareExpression = "_" + field.Name.ToLower() + " == value";
    }

	//make private field for storing property value
	WriteLine(String.Format("private {0} _{1} {2};",
		field.AccessableType,
		field.Name.ToLower(),
		(field.DataObjectInitialValue != null) ? " = " + field.DataObjectInitialValue : ""));
        
    if(isSerializable == false)
    {
    WriteLine("[XmlIgnore]");
    }
    else
    {
    WriteLine("[XmlElement]");
    }
    if(field.IsDepreciated)
    {
		WriteLine("[Obsolete]");
	}
 #>
[Field(Name = "<#=field.Name#>")]
public virtual <#=field.AccessableType#> <#=field.Name#>
{
    get 
    { 
        <#+
        if (field.IsFK) { #> 
        if(_<#=field.Ref.ToLower()#> != null)
        {
            return _<#=field.Ref.ToLower()#>.<#=field.Name#>;
        }
        <#+} #>
        return _<#=field.Name.ToLower()#>; 
    }
    set 
    {
        if(<#=compareExpression#>) { return; }
<#+
        if(field.IsFK)
        {
            WriteLine(string.Format("        if(value == null || value.Value == 0) {{ _{0} = null;  }}", field.Ref.ToLower()));
        }
 #>
        _<#=field.Name.ToLower()#> = value;
        this.ValidateProperty(<#=table.Name.ToUpper()#>.<#=field.Name.ToUpper()#>, _<#=field.Name.ToLower()#>);
        this.NotifyPropertyChanged(<#=table.Name.ToUpper()#>.<#=field.Name.ToUpper()#>);
    }
}
<#+}
//---------------------------------End Method: MakeProperty




//----------------------------------Method: MakeUtilProperties------------------------------------------------------
public void MakeUtilProperties(bool trackCreated, bool trackModified, bool trackRowVersion)
{
	WriteLine("");
	if(trackCreated)
	{
#>
[XmlIgnore]
[CreatedByField()]
public string CreatedBy { get;  set; }

[XmlIgnore]
[InfrastructureFieldAttribute (Name = "CreatedDate",
PersistMode = PersistMode.Never)]
public DateTime CreatedDate { get; set; }
<#+
	}
	
	if(trackModified)
	{
#>

[XmlIgnore]
[ModifiedByField()]
public string ModifiedBy { get; set; }

[XmlIgnore]
[InfrastructureFieldAttribute (Name = "ModifiedDate",
PersistMode = PersistMode.Never)]
public string ModifiedDate { get; set; }

<#+
	}
}
//---------------------------------End Method: MakeUtilProperties	
#>






