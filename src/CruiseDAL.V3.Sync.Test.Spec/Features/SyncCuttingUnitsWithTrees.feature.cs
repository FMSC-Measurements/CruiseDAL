// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CruiseDAL.V3.Sync.Test.Spec.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SyncCuttingUnitsWithTreesFeature : object, Xunit.IClassFixture<SyncCuttingUnitsWithTreesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SyncCuttingUnitsWithTrees.feature"
#line hidden
        
        public SyncCuttingUnitsWithTreesFeature(SyncCuttingUnitsWithTreesFeature.FixtureData fixtureData, CruiseDAL_V3_Sync_Test_Spec_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Sync Cutting Units With Trees", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "FileAlias"});
            table37.AddRow(new string[] {
                        "source"});
            table37.AddRow(new string[] {
                        "dest"});
#line 5
 testRunner.Given("the following cruise files exist:", ((string)(null)), table37, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "StratumCode"});
            table38.AddRow(new string[] {
                        "st1"});
#line 10
 testRunner.And("in \'source, dest\' the following strata exist:", ((string)(null)), table38, "* ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "SampleGroupCode",
                        "StratumCode"});
            table39.AddRow(new string[] {
                        "sg1",
                        "st1"});
#line 14
 testRunner.And("in \'source, dest\' file the following sample groups exist:", ((string)(null)), table39, "* ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "SpeciesCode"});
            table40.AddRow(new string[] {
                        "sp1"});
#line 18
 testRunner.And("in \'source, dest\' the following species exist:", ((string)(null)), table40, "* ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "CuttingUnitID"});
            table41.AddRow(new string[] {
                        "u1",
                        "unit1"});
#line 22
 testRunner.And("in \'source, dest\' the following units exist:", ((string)(null)), table41, "* ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "CuttingUnitID"});
            table42.AddRow(new string[] {
                        "u2",
                        "unit2s"});
#line 27
 testRunner.And("in \'source\' the following units exist:", ((string)(null)), table42, "* ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "CuttingUnitID"});
            table43.AddRow(new string[] {
                        "u2",
                        "unit2d"});
#line 31
 testRunner.And("in \'dest\' the following units exist:", ((string)(null)), table43, "* ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "TreeNumber",
                        "StratumCode",
                        "SampleGroupCode",
                        "SpeciesCode",
                        "TreeID"});
            table44.AddRow(new string[] {
                        "u2",
                        "1",
                        "st1",
                        "sg1",
                        "sp1",
                        "tree1_u2s"});
#line 36
 testRunner.And("in \'source\' the following trees exist:", ((string)(null)), table44, "* ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "TreeNumber",
                        "StratumCode",
                        "SampleGroupCode",
                        "SpeciesCode",
                        "TreeID"});
            table45.AddRow(new string[] {
                        "u2",
                        "1",
                        "st1",
                        "sg1",
                        "sp1",
                        "tree1_u2d"});
#line 40
 testRunner.And("in \'dest\' the following trees exist:", ((string)(null)), table45, "* ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "TreeNumber",
                        "StratumCode",
                        "SampleGroupCode",
                        "SpeciesCode",
                        "TreeID"});
            table46.AddRow(new string[] {
                        "u2",
                        "2",
                        "st1",
                        "sg1",
                        "sp1",
                        "tree2_u2s"});
#line 45
 testRunner.And("in \'source\' the following trees exist:", ((string)(null)), table46, "* ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "TreeNumber",
                        "StratumCode",
                        "SampleGroupCode",
                        "SpeciesCode",
                        "TreeID"});
            table47.AddRow(new string[] {
                        "u2",
                        "3",
                        "st1",
                        "sg1",
                        "sp1",
                        "tree3_u2d"});
#line 49
 testRunner.And("in \'dest\' the following trees exist:", ((string)(null)), table47, "* ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cutting Unit Conflict Check")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Cutting Units With Trees")]
        [Xunit.TraitAttribute("Description", "Cutting Unit Conflict Check")]
        public virtual void CuttingUnitConflictCheck()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cutting Unit Conflict Check", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 55
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "SourceRecID",
                            "DestRecID",
                            "DownstreamConflictsCount"});
                table48.AddRow(new string[] {
                            "unit2s",
                            "unit2d",
                            "1"});
#line 56
 testRunner.Then("Cutting Unit Conflicts Has:", ((string)(null)), table48, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Conflicts With ChoseDest")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Cutting Units With Trees")]
        [Xunit.TraitAttribute("Description", "Resolve Conflicts With ChoseDest")]
        public virtual void ResolveConflictsWithChoseDest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Conflicts With ChoseDest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 61
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
 testRunner.And("I resolve all Cutting Unit conflicts with \'ChoseDest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "CuttingUnitID"});
                table49.AddRow(new string[] {
                            "unit1"});
                table49.AddRow(new string[] {
                            "unit2d"});
#line 65
 testRunner.Then("\'dest\' contains cutting units:", ((string)(null)), table49, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID"});
                table50.AddRow(new string[] {
                            "tree1_u2d"});
                table50.AddRow(new string[] {
                            "tree3_u2d"});
#line 69
 testRunner.And("\'dest\' contains trees:", ((string)(null)), table50, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Conflicts With ChoseSource")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Cutting Units With Trees")]
        [Xunit.TraitAttribute("Description", "Resolve Conflicts With ChoseSource")]
        public virtual void ResolveConflictsWithChoseSource()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Conflicts With ChoseSource", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 75
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
 testRunner.And("I resolve all Cutting Unit conflicts with \'ChoseSource\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "CuttingUnitID",
                            "CuttingUnitCode"});
                table51.AddRow(new string[] {
                            "unit1",
                            "u1"});
                table51.AddRow(new string[] {
                            "unit2s",
                            "u2"});
#line 79
 testRunner.Then("\'dest\' contains cutting units:", ((string)(null)), table51, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID"});
                table52.AddRow(new string[] {
                            "tree1_u2s"});
                table52.AddRow(new string[] {
                            "tree2_u2s"});
#line 83
  testRunner.And("\'source\' contains trees:", ((string)(null)), table52, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Conflict With ModifyDest")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Cutting Units With Trees")]
        [Xunit.TraitAttribute("Description", "Resolve Conflict With ModifyDest")]
        public virtual void ResolveConflictWithModifyDest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Conflict With ModifyDest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 90
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "DestRecID",
                            "CuttingUnitCode"});
                table53.AddRow(new string[] {
                            "unit2d",
                            "u3"});
#line 91
 testRunner.And("I resolve CuttingUnit Conflicts with ModifyDest using:", ((string)(null)), table53, "And ");
#line hidden
#line 94
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "CuttingUnitID",
                            "CuttingUnitCode"});
                table54.AddRow(new string[] {
                            "unit1",
                            "u1"});
                table54.AddRow(new string[] {
                            "unit2s",
                            "u2"});
                table54.AddRow(new string[] {
                            "unit2d",
                            "u3"});
#line 96
 testRunner.Then("\'dest\' contains cutting units:", ((string)(null)), table54, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID",
                            "CuttingUnitCode"});
                table55.AddRow(new string[] {
                            "tree1_u2s",
                            "u2"});
                table55.AddRow(new string[] {
                            "tree2_u2s",
                            "u2"});
                table55.AddRow(new string[] {
                            "tree1_u2d",
                            "u3"});
                table55.AddRow(new string[] {
                            "tree3_u2d",
                            "u3"});
#line 101
 testRunner.And("\'dest\' contains trees:", ((string)(null)), table55, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Conflict With ModifySource")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Cutting Units With Trees")]
        [Xunit.TraitAttribute("Description", "Resolve Conflict With ModifySource")]
        public virtual void ResolveConflictWithModifySource()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Conflict With ModifySource", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 111
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "SourceRecID",
                            "CuttingUnitCode"});
                table56.AddRow(new string[] {
                            "unit2s",
                            "u3"});
#line 112
 testRunner.And("I resolve CuttingUnit Conflicts with ModifySource using:", ((string)(null)), table56, "And ");
#line hidden
#line 115
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "CuttingUnitID",
                            "CuttingUnitCode"});
                table57.AddRow(new string[] {
                            "unit1",
                            "u1"});
                table57.AddRow(new string[] {
                            "unit2d",
                            "u2"});
                table57.AddRow(new string[] {
                            "unit2s",
                            "u3"});
#line 117
 testRunner.Then("\'dest\' contains cutting units:", ((string)(null)), table57, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID",
                            "CuttingUnitCode"});
                table58.AddRow(new string[] {
                            "tree1_u2s",
                            "u3"});
                table58.AddRow(new string[] {
                            "tree2_u2s",
                            "u3"});
                table58.AddRow(new string[] {
                            "tree1_u2d",
                            "u2"});
                table58.AddRow(new string[] {
                            "tree3_u2d",
                            "u2"});
#line 122
 testRunner.And("\'dest\' contains trees:", ((string)(null)), table58, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SyncCuttingUnitsWithTreesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SyncCuttingUnitsWithTreesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
