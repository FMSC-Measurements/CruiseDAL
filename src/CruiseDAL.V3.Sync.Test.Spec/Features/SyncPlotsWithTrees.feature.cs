// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CruiseDAL.V3.Sync.Test.Spec.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SyncPlotsWithTreesFeature : object, Xunit.IClassFixture<SyncPlotsWithTreesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SyncPlotsWithTrees.feature"
#line hidden
        
        public SyncPlotsWithTreesFeature(SyncPlotsWithTreesFeature.FixtureData fixtureData, CruiseDAL_V3_Sync_Test_Spec_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Sync Plots With Trees", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "FileAlias"});
            table86.AddRow(new string[] {
                        "source"});
            table86.AddRow(new string[] {
                        "dest"});
#line 4
 testRunner.Given("the following cruise files exist:", ((string)(null)), table86, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode"});
            table87.AddRow(new string[] {
                        "u1"});
            table87.AddRow(new string[] {
                        "u2"});
#line 9
 testRunner.And("in \'source, dest\' the following units exist:", ((string)(null)), table87, "* ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "StratumCode"});
            table88.AddRow(new string[] {
                        "st1"});
            table88.AddRow(new string[] {
                        "st2"});
#line 14
 testRunner.And("in \'source, dest\' the following strata exist:", ((string)(null)), table88, "* ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        "SampleGroupCode",
                        "StratumCode"});
            table89.AddRow(new string[] {
                        "sg1",
                        "st1"});
            table89.AddRow(new string[] {
                        "sg2",
                        "st1"});
            table89.AddRow(new string[] {
                        "sg1",
                        "st2"});
            table89.AddRow(new string[] {
                        "sg2",
                        "st2"});
#line 19
 testRunner.And("in \'source, dest\' file the following sample groups exist:", ((string)(null)), table89, "* ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "SpeciesCode"});
            table90.AddRow(new string[] {
                        "sp1"});
#line 26
 testRunner.And("in \'source, dest\' the following species exist:", ((string)(null)), table90, "* ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlotID",
                        "CuttingUnitCode",
                        "PlotNumber",
                        "Strata"});
            table91.AddRow(new string[] {
                        "plot1",
                        "u1",
                        "1",
                        "st1, st2"});
            table91.AddRow(new string[] {
                        "plot2d",
                        "u1",
                        "2",
                        "st1, st2"});
            table91.AddRow(new string[] {
                        "plot3d",
                        "u1",
                        "3",
                        "st1, st2"});
#line 30
 testRunner.And("in \'dest\' the following plots exist:", ((string)(null)), table91, "* ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlotID",
                        "CuttingUnitCode",
                        "PlotNumber",
                        "Strata"});
            table92.AddRow(new string[] {
                        "plot1",
                        "u1",
                        "1",
                        "st1, st2"});
            table92.AddRow(new string[] {
                        "plot2s",
                        "u1",
                        "2",
                        "st1, st2"});
            table92.AddRow(new string[] {
                        "plot4s",
                        "u1",
                        "4",
                        "st1, st2"});
#line 36
 testRunner.And("in \'source\' the following plots exist:", ((string)(null)), table92, "* ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "PlotNumber",
                        "StratumCode",
                        "SampleGroupCode",
                        "SpeciesCode",
                        "TreeNumber",
                        "TreeID"});
            table93.AddRow(new string[] {
                        "u1",
                        "1",
                        "st1",
                        "sg1",
                        "sp1",
                        "1",
                        "tree1_p1"});
#line 42
 testRunner.And("in \'source, dest\' the following trees exist:", ((string)(null)), table93, "* ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "PlotNumber",
                        "StratumCode",
                        "SampleGroupCode",
                        "SpeciesCode",
                        "TreeNumber",
                        "TreeID"});
            table94.AddRow(new string[] {
                        "u1",
                        "2",
                        "st1",
                        "sg1",
                        "sp1",
                        "1",
                        "tree1_p2s"});
            table94.AddRow(new string[] {
                        "u1",
                        "2",
                        "st1",
                        "sg1",
                        "sp1",
                        "2",
                        "tree2_p2s"});
#line 46
 testRunner.And("in \'source\' the following trees exist:", ((string)(null)), table94, "* ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "PlotNumber",
                        "StratumCode",
                        "SampleGroupCode",
                        "SpeciesCode",
                        "TreeNumber",
                        "TreeID"});
            table95.AddRow(new string[] {
                        "u1",
                        "2",
                        "st1",
                        "sg1",
                        "sp1",
                        "1",
                        "tree1_p2d"});
            table95.AddRow(new string[] {
                        "u1",
                        "2",
                        "st1",
                        "sg1",
                        "sp1",
                        "3",
                        "tree3_p2d"});
#line 51
 testRunner.And("in \'dest\' the following trees exist:", ((string)(null)), table95, "* ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check For Conflicts")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Plots With Trees")]
        [Xunit.TraitAttribute("Description", "Check For Conflicts")]
        public virtual void CheckForConflicts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check For Conflicts", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 57
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
 testRunner.Then("Plot Conflicts has 1 conflict(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
 testRunner.And("TreeConflicts has 0 conflict(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                            "SourceRecID",
                            "DestRecID",
                            "DownstreamConflictCount"});
                table96.AddRow(new string[] {
                            "plot2s",
                            "plot2d",
                            "1"});
#line 60
 testRunner.And("PlotConflicts has:", ((string)(null)), table96, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Plot Conflicts With ChoseDest")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Plots With Trees")]
        [Xunit.TraitAttribute("Description", "Resolve Plot Conflicts With ChoseDest")]
        public virtual void ResolvePlotConflictsWithChoseDest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Plot Conflicts With ChoseDest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 65
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.And("I resolve all plot conflicts with \'ChoseDest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                            "PlotID"});
                table97.AddRow(new string[] {
                            "plot1"});
                table97.AddRow(new string[] {
                            "plot2d"});
                table97.AddRow(new string[] {
                            "plot3d"});
                table97.AddRow(new string[] {
                            "plot4s"});
#line 69
 testRunner.Then("\'dest\' contains plots:", ((string)(null)), table97, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID",
                            "TreeNumber"});
                table98.AddRow(new string[] {
                            "tree1_p1",
                            "1"});
                table98.AddRow(new string[] {
                            "tree1_p2d",
                            "1"});
                table98.AddRow(new string[] {
                            "tree3_p2d",
                            "3"});
#line 75
 testRunner.And("\'dest\' contains trees:", ((string)(null)), table98, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Plot conflict with ChoseSource")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Plots With Trees")]
        [Xunit.TraitAttribute("Description", "Resolve Plot conflict with ChoseSource")]
        public virtual void ResolvePlotConflictWithChoseSource()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Plot conflict with ChoseSource", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 82
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
 testRunner.And("I resolve all plot conflicts with \'ChoseSource\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                            "PlotID"});
                table99.AddRow(new string[] {
                            "plot1"});
                table99.AddRow(new string[] {
                            "plot2s"});
                table99.AddRow(new string[] {
                            "plot3d"});
                table99.AddRow(new string[] {
                            "plot4s"});
#line 86
 testRunner.Then("\'dest\' contains plots:", ((string)(null)), table99, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID",
                            "TreeNumber"});
                table100.AddRow(new string[] {
                            "tree1_p1",
                            "1"});
                table100.AddRow(new string[] {
                            "tree1_p2s",
                            "1"});
                table100.AddRow(new string[] {
                            "tree2_p2s",
                            "2"});
#line 92
 testRunner.And("\'dest\' contains trees:", ((string)(null)), table100, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Plot Conflicts With ChoseSourceMergeData and ChoseSource")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Plots With Trees")]
        [Xunit.TraitAttribute("Description", "Resolve Plot Conflicts With ChoseSourceMergeData and ChoseSource")]
        public virtual void ResolvePlotConflictsWithChoseSourceMergeDataAndChoseSource()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Plot Conflicts With ChoseSourceMergeData and ChoseSource", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 99
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 100
 testRunner.And("I resolve all plot conflicts with \'ChoseSourceMergeData\' and downstream conflicts" +
                        " with \'ChoseSource\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                            "PlotID"});
                table101.AddRow(new string[] {
                            "plot1"});
                table101.AddRow(new string[] {
                            "plot2s"});
                table101.AddRow(new string[] {
                            "plot3d"});
                table101.AddRow(new string[] {
                            "plot4s"});
#line 103
 testRunner.Then("\'dest\' contains plots:", ((string)(null)), table101, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID",
                            "TreeNumber"});
                table102.AddRow(new string[] {
                            "tree1_p1",
                            "1"});
                table102.AddRow(new string[] {
                            "tree1_p2s",
                            "1"});
                table102.AddRow(new string[] {
                            "tree2_p2s",
                            "2"});
                table102.AddRow(new string[] {
                            "tree3_p2d",
                            "3"});
#line 109
 testRunner.And("\'dest\' contains trees:", ((string)(null)), table102, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Plot Conflicts With ChoseSourceMergeData and ChoseDest")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Plots With Trees")]
        [Xunit.TraitAttribute("Description", "Resolve Plot Conflicts With ChoseSourceMergeData and ChoseDest")]
        public virtual void ResolvePlotConflictsWithChoseSourceMergeDataAndChoseDest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Plot Conflicts With ChoseSourceMergeData and ChoseDest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 116
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 117
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 118
 testRunner.And("I resolve all plot conflicts with \'ChoseSourceMergeData\' and downstream conflicts" +
                        " with \'ChoseDest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                            "PlotID"});
                table103.AddRow(new string[] {
                            "plot1"});
                table103.AddRow(new string[] {
                            "plot2s"});
                table103.AddRow(new string[] {
                            "plot3d"});
                table103.AddRow(new string[] {
                            "plot4s"});
#line 121
 testRunner.Then("\'dest\' contains plots:", ((string)(null)), table103, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID",
                            "TreeNumber"});
                table104.AddRow(new string[] {
                            "tree1_p1",
                            "1"});
                table104.AddRow(new string[] {
                            "tree1_p2d",
                            "1"});
                table104.AddRow(new string[] {
                            "tree2_p2s",
                            "2"});
                table104.AddRow(new string[] {
                            "tree3_p2d",
                            "3"});
#line 127
 testRunner.And("\'dest\' contains trees:", ((string)(null)), table104, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Plot Conflicts With ChoseDestMergeData and ChoseSource")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Plots With Trees")]
        [Xunit.TraitAttribute("Description", "Resolve Plot Conflicts With ChoseDestMergeData and ChoseSource")]
        public virtual void ResolvePlotConflictsWithChoseDestMergeDataAndChoseSource()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Plot Conflicts With ChoseDestMergeData and ChoseSource", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 136
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 137
 testRunner.And("I resolve all plot conflicts with \'ChoseDestMergeData\' and downstream conflicts w" +
                        "ith \'ChoseSource\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 139
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                            "PlotID"});
                table105.AddRow(new string[] {
                            "plot1"});
                table105.AddRow(new string[] {
                            "plot2d"});
                table105.AddRow(new string[] {
                            "plot3d"});
                table105.AddRow(new string[] {
                            "plot4s"});
#line 140
 testRunner.Then("\'dest\' contains plots:", ((string)(null)), table105, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID",
                            "TreeNumber"});
                table106.AddRow(new string[] {
                            "tree1_p1",
                            "1"});
                table106.AddRow(new string[] {
                            "tree1_p2s",
                            "1"});
                table106.AddRow(new string[] {
                            "tree2_p2s",
                            "2"});
                table106.AddRow(new string[] {
                            "tree3_p2d",
                            "3"});
#line 146
 testRunner.And("\'dest\' contains trees:", ((string)(null)), table106, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Plot Conflicts With ChoseDestMergeData and ChoseDest")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Plots With Trees")]
        [Xunit.TraitAttribute("Description", "Resolve Plot Conflicts With ChoseDestMergeData and ChoseDest")]
        public virtual void ResolvePlotConflictsWithChoseDestMergeDataAndChoseDest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Plot Conflicts With ChoseDestMergeData and ChoseDest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 153
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 154
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 155
 testRunner.And("I resolve all plot conflicts with \'ChoseDestMergeData\' and downstream conflicts w" +
                        "ith \'ChoseDest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 156
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                            "PlotID"});
                table107.AddRow(new string[] {
                            "plot1"});
                table107.AddRow(new string[] {
                            "plot2d"});
                table107.AddRow(new string[] {
                            "plot3d"});
                table107.AddRow(new string[] {
                            "plot4s"});
#line 158
 testRunner.Then("\'dest\' contains plots:", ((string)(null)), table107, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID",
                            "TreeNumber"});
                table108.AddRow(new string[] {
                            "tree1_p1",
                            "1"});
                table108.AddRow(new string[] {
                            "tree1_p2d",
                            "1"});
                table108.AddRow(new string[] {
                            "tree2_p2s",
                            "2"});
                table108.AddRow(new string[] {
                            "tree3_p2d",
                            "3"});
#line 164
 testRunner.And("\'dest\' contains trees:", ((string)(null)), table108, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SyncPlotsWithTreesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SyncPlotsWithTreesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
