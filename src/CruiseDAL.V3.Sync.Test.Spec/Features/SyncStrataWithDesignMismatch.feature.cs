// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CruiseDAL.V3.Sync.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SyncStrataWithDesignMismatchFeature : object, Xunit.IClassFixture<SyncStrataWithDesignMismatchFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SyncStrataWithDesignMismatch.feature"
#line hidden
        
        public SyncStrataWithDesignMismatchFeature(SyncStrataWithDesignMismatchFeature.FixtureData fixtureData, CruiseDAL_V3_Sync_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Sync Strata With Design Mismatch", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
            TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                        "FileAlias",
                        "DeviceAlias"});
            table213.AddRow(new string[] {
                        "source",
                        "srcDevice"});
            table213.AddRow(new string[] {
                        "dest",
                        "destDevice"});
#line 4
 testRunner.Given("the following cruise files exist:", ((string)(null)), table213, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "CuttingUnitID"});
            table214.AddRow(new string[] {
                        "u1",
                        "unit1"});
#line 9
 testRunner.And("in \'source, dest\' the following units exist:", ((string)(null)), table214, "* ");
#line hidden
            TechTalk.SpecFlow.Table table215 = new TechTalk.SpecFlow.Table(new string[] {
                        "StratumCode",
                        "Units",
                        "StratumID",
                        "Method"});
            table215.AddRow(new string[] {
                        "st1",
                        "u1",
                        "stratum1",
                        "STR"});
#line 13
 testRunner.And("in \'source\' the following strata exist:", ((string)(null)), table215, "* ");
#line hidden
            TechTalk.SpecFlow.Table table216 = new TechTalk.SpecFlow.Table(new string[] {
                        "StratumCode",
                        "Units",
                        "StratumID",
                        "Method"});
            table216.AddRow(new string[] {
                        "st1",
                        "u1",
                        "stratum1",
                        "100"});
#line 17
 testRunner.And("in \'dest\' the following strata exist:", ((string)(null)), table216, "* ");
#line hidden
            TechTalk.SpecFlow.Table table217 = new TechTalk.SpecFlow.Table(new string[] {
                        "SampleGroupCode",
                        "StratumCode"});
            table217.AddRow(new string[] {
                        "sg1",
                        "st1"});
            table217.AddRow(new string[] {
                        "sg2",
                        "st1"});
#line 23
 testRunner.And("in \'source, dest\' file the following sample groups exist:", ((string)(null)), table217, "* ");
#line hidden
            TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                        "SpeciesCode"});
            table218.AddRow(new string[] {
                        "sp1"});
#line 27
 testRunner.And("in \'source, dest\' the following species exist:", ((string)(null)), table218, "* ");
#line hidden
            TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "StratumCode",
                        "SampleGroupCode",
                        "SpeciesCode",
                        "TreeNumber",
                        "TreeID"});
            table219.AddRow(new string[] {
                        "u1",
                        "st1",
                        "sg1",
                        "sp1",
                        "1",
                        "tree1"});
#line 31
 testRunner.And("in \'source, dest\' the following trees exist:", ((string)(null)), table219, "* ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check For Conflicts")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Strata With Design Mismatch")]
        [Xunit.TraitAttribute("Description", "Check For Conflicts")]
        public virtual void CheckForConflicts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check For Conflicts", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 36
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.Then("Has No Conflicts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check For Design Mismatch")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Strata With Design Mismatch")]
        [Xunit.TraitAttribute("Description", "Check For Design Mismatch")]
        public virtual void CheckForDesignMismatch()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check For Design Mismatch", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 40
 testRunner.When("I check \'source\' for Design Mismatch errors against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                            "error"});
                table220.AddRow(new string[] {
                            "Cruise Method Mismatch: Stratum Code:st1"});
#line 41
 testRunner.Then("Design Errors Has:", ((string)(null)), table220, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SyncStrataWithDesignMismatchFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SyncStrataWithDesignMismatchFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
