// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CruiseDAL.V3.Sync.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SyncTreesWithLogsFeature : object, Xunit.IClassFixture<SyncTreesWithLogsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SyncTreesWithLogs.feature"
#line hidden
        
        public SyncTreesWithLogsFeature(SyncTreesWithLogsFeature.FixtureData fixtureData, CruiseDAL_V3_Sync_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Sync Trees With Logs", "Sync Tree Records between two cruise files", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
            TechTalk.SpecFlow.Table table246 = new TechTalk.SpecFlow.Table(new string[] {
                        "FileAlias"});
            table246.AddRow(new string[] {
                        "source"});
            table246.AddRow(new string[] {
                        "dest"});
#line 6
 testRunner.Given("the following cruise files exist:", ((string)(null)), table246, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table247 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode"});
            table247.AddRow(new string[] {
                        "u1"});
            table247.AddRow(new string[] {
                        "u2"});
#line 11
 testRunner.And("in \'source, dest\' the following units exist:", ((string)(null)), table247, "* ");
#line hidden
            TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                        "StratumCode"});
            table248.AddRow(new string[] {
                        "st1"});
            table248.AddRow(new string[] {
                        "st2"});
#line 16
 testRunner.And("in \'source, dest\' the following strata exist:", ((string)(null)), table248, "* ");
#line hidden
            TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                        "SampleGroupCode",
                        "StratumCode"});
            table249.AddRow(new string[] {
                        "sg1",
                        "st1"});
            table249.AddRow(new string[] {
                        "sg2",
                        "st1"});
            table249.AddRow(new string[] {
                        "sg1",
                        "st2"});
            table249.AddRow(new string[] {
                        "sg2",
                        "st2"});
#line 21
 testRunner.And("in \'source, dest\' file the following sample groups exist:", ((string)(null)), table249, "* ");
#line hidden
            TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                        "SpeciesCode"});
            table250.AddRow(new string[] {
                        "sp1"});
#line 28
 testRunner.And("in \'source, dest\' the following species exist:", ((string)(null)), table250, "* ");
#line hidden
            TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "StratumCode",
                        "SampleGroupCode",
                        "SpeciesCode",
                        "TreeNumber",
                        "TreeID"});
            table251.AddRow(new string[] {
                        "u1",
                        "st1",
                        "sg1",
                        "sp1",
                        "1",
                        "tree1"});
            table251.AddRow(new string[] {
                        "u1",
                        "st1",
                        "sg1",
                        "sp1",
                        "2",
                        "tree2d"});
            table251.AddRow(new string[] {
                        "u1",
                        "st1",
                        "sg1",
                        "sp1",
                        "3",
                        "tree3"});
#line 33
 testRunner.And("in \'dest\' the following trees exist:", ((string)(null)), table251, "* ");
#line hidden
            TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "StratumCode",
                        "SampleGroupCode",
                        "SpeciesCode",
                        "TreeNumber",
                        "TreeID"});
            table252.AddRow(new string[] {
                        "u1",
                        "st1",
                        "sg1",
                        "sp1",
                        "1",
                        "tree1"});
            table252.AddRow(new string[] {
                        "u1",
                        "st1",
                        "sg1",
                        "sp1",
                        "2",
                        "tree2s"});
            table252.AddRow(new string[] {
                        "u1",
                        "st1",
                        "sg1",
                        "sp1",
                        "4",
                        "tree4"});
#line 39
 testRunner.And("in \'source\' the following trees exist:", ((string)(null)), table252, "* ");
#line hidden
            TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                        "TreeID",
                        "LogNumber",
                        "LogID"});
            table253.AddRow(new string[] {
                        "tree1",
                        "1",
                        "log1_t1"});
            table253.AddRow(new string[] {
                        "tree2d",
                        "1",
                        "log1_t2d"});
            table253.AddRow(new string[] {
                        "tree2d",
                        "2",
                        "log2_t2d"});
#line 48
 testRunner.And("in \'dest\' the following logs exist:", ((string)(null)), table253, "* ");
#line hidden
            TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                        "TreeID",
                        "LogNumber",
                        "LogID"});
            table254.AddRow(new string[] {
                        "tree1",
                        "1",
                        "log1_t1"});
            table254.AddRow(new string[] {
                        "tree2s",
                        "1",
                        "log1_t2s"});
            table254.AddRow(new string[] {
                        "tree2s",
                        "3",
                        "log3_t2s"});
#line 55
 testRunner.And("in \'source\' the following logs exist:", ((string)(null)), table254, "* ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check For Conflicts")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Trees With Logs")]
        [Xunit.TraitAttribute("Description", "Check For Conflicts")]
        public virtual void CheckForConflicts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check For Conflicts", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 63
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
 testRunner.Then("TreeConflicts has 1 conflict(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
 testRunner.And("Log Conflict List has 0 conflict(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                            "SourceRecID",
                            "DestRecID",
                            "DownstreamConflictCount"});
                table255.AddRow(new string[] {
                            "tree2s",
                            "tree2d",
                            "0"});
#line 66
 testRunner.And("TreeConflicts records has:", ((string)(null)), table255, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Tree Conflicts With ChoseDest")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Trees With Logs")]
        [Xunit.TraitAttribute("Description", "Resolve Tree Conflicts With ChoseDest")]
        public virtual void ResolveTreeConflictsWithChoseDest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Tree Conflicts With ChoseDest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 70
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 71
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
 testRunner.And("I resolve all tree conflicts with \'ChoseDest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID"});
                table256.AddRow(new string[] {
                            "tree1"});
                table256.AddRow(new string[] {
                            "tree2d"});
                table256.AddRow(new string[] {
                            "tree3"});
                table256.AddRow(new string[] {
                            "tree4"});
#line 75
 testRunner.Then("\'dest\' contains trees:", ((string)(null)), table256, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                            "LogID",
                            "LogNumber"});
                table257.AddRow(new string[] {
                            "log1_t1",
                            "1"});
                table257.AddRow(new string[] {
                            "log1_t2d",
                            "1"});
                table257.AddRow(new string[] {
                            "log2_t2d",
                            "2"});
#line 81
 testRunner.And("\'dest\' contains logs:", ((string)(null)), table257, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Tree Conflicts With ChoseSource")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Trees With Logs")]
        [Xunit.TraitAttribute("Description", "Resolve Tree Conflicts With ChoseSource")]
        public virtual void ResolveTreeConflictsWithChoseSource()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Tree Conflicts With ChoseSource", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 87
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 88
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
 testRunner.And("I resolve all tree conflicts with \'ChoseSource\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID"});
                table258.AddRow(new string[] {
                            "tree1"});
                table258.AddRow(new string[] {
                            "tree2s"});
                table258.AddRow(new string[] {
                            "tree3"});
                table258.AddRow(new string[] {
                            "tree4"});
#line 92
 testRunner.Then("\'dest\' contains trees:", ((string)(null)), table258, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                            "LogID",
                            "LogNumber"});
                table259.AddRow(new string[] {
                            "log1_t1",
                            "1"});
                table259.AddRow(new string[] {
                            "log1_t2s",
                            "1"});
                table259.AddRow(new string[] {
                            "log3_t2s",
                            "3"});
#line 98
 testRunner.And("\'dest\' contains logs:", ((string)(null)), table259, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Conflict With ModifyDest")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Trees With Logs")]
        [Xunit.TraitAttribute("Description", "Resolve Conflict With ModifyDest")]
        public virtual void ResolveConflictWithModifyDest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Conflict With ModifyDest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 104
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 105
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                            "DestRecID",
                            "TreeNumber"});
                table260.AddRow(new string[] {
                            "tree2d",
                            "5"});
#line 106
 testRunner.And("I resolve tree conflicts with ModifyDest using:", ((string)(null)), table260, "And ");
#line hidden
#line 109
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID",
                            "TreeNumber"});
                table261.AddRow(new string[] {
                            "tree1",
                            "1"});
                table261.AddRow(new string[] {
                            "tree2d",
                            "5"});
                table261.AddRow(new string[] {
                            "tree2s",
                            "2"});
                table261.AddRow(new string[] {
                            "tree3",
                            "3"});
                table261.AddRow(new string[] {
                            "tree4",
                            "4"});
#line 111
 testRunner.Then("\'dest\' contains trees:", ((string)(null)), table261, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                            "LogID",
                            "LogNumber"});
                table262.AddRow(new string[] {
                            "log1_t1",
                            "1"});
                table262.AddRow(new string[] {
                            "log1_t2d",
                            "1"});
                table262.AddRow(new string[] {
                            "log2_t2d",
                            "2"});
                table262.AddRow(new string[] {
                            "log1_t2s",
                            "1"});
                table262.AddRow(new string[] {
                            "log3_t2s",
                            "3"});
#line 118
 testRunner.And("\'dest\' contains logs:", ((string)(null)), table262, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Conflict With ModifySource")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Trees With Logs")]
        [Xunit.TraitAttribute("Description", "Resolve Conflict With ModifySource")]
        public virtual void ResolveConflictWithModifySource()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Conflict With ModifySource", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 126
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 127
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                            "SourceRecID",
                            "TreeNumber"});
                table263.AddRow(new string[] {
                            "tree2s",
                            "5"});
#line 128
 testRunner.And("I resolve tree conflicts with ModifySource using:", ((string)(null)), table263, "And ");
#line hidden
#line 131
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID",
                            "TreeNumber"});
                table264.AddRow(new string[] {
                            "tree1",
                            "1"});
                table264.AddRow(new string[] {
                            "tree2d",
                            "2"});
                table264.AddRow(new string[] {
                            "tree2s",
                            "5"});
                table264.AddRow(new string[] {
                            "tree3",
                            "3"});
                table264.AddRow(new string[] {
                            "tree4",
                            "4"});
#line 133
 testRunner.Then("\'dest\' contains trees:", ((string)(null)), table264, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                            "LogID",
                            "LogNumber"});
                table265.AddRow(new string[] {
                            "log1_t1",
                            "1"});
                table265.AddRow(new string[] {
                            "log1_t2d",
                            "1"});
                table265.AddRow(new string[] {
                            "log2_t2d",
                            "2"});
                table265.AddRow(new string[] {
                            "log1_t2s",
                            "1"});
                table265.AddRow(new string[] {
                            "log3_t2s",
                            "3"});
#line 140
 testRunner.And("\'dest\' contains logs:", ((string)(null)), table265, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Conflict With ChoseSourceMergeData Is Not Supported")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Trees With Logs")]
        [Xunit.TraitAttribute("Description", "Resolve Conflict With ChoseSourceMergeData Is Not Supported")]
        public virtual void ResolveConflictWithChoseSourceMergeDataIsNotSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Conflict With ChoseSourceMergeData Is Not Supported", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 148
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 149
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 150
 testRunner.And("I resolve all tree conflicts with \'ChoseSourceMergeData\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
 testRunner.Then("running conflict resolution of \'source\' file against \'dest\' not supported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Conflict With ChoseDestMergeData Is Not Supported")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Trees With Logs")]
        [Xunit.TraitAttribute("Description", "Resolve Conflict With ChoseDestMergeData Is Not Supported")]
        public virtual void ResolveConflictWithChoseDestMergeDataIsNotSupported()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Conflict With ChoseDestMergeData Is Not Supported", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 153
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 154
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 155
 testRunner.And("I resolve all tree conflicts with \'ChoseDestMergeData\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 156
 testRunner.Then("running conflict resolution of \'source\' file against \'dest\' not supported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SyncTreesWithLogsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SyncTreesWithLogsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
