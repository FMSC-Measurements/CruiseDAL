// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CruiseDAL.V3.Sync.Test.Spec.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SyncCuttingUnitsWithPlotsFeature : object, Xunit.IClassFixture<SyncCuttingUnitsWithPlotsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SyncCuttingUnitsWithPlots.feature"
#line hidden
        
        public SyncCuttingUnitsWithPlotsFeature(SyncCuttingUnitsWithPlotsFeature.FixtureData fixtureData, CruiseDAL_V3_Sync_Test_Spec_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Sync Cutting Units With Plots", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "FileAlias"});
            table12.AddRow(new string[] {
                        "source"});
            table12.AddRow(new string[] {
                        "dest"});
#line 5
 testRunner.Given("the following cruise files exist:", ((string)(null)), table12, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "CuttingUnitID"});
            table13.AddRow(new string[] {
                        "u1",
                        "unit1"});
#line 10
 testRunner.And("in \'source, dest\' the following units exist:", ((string)(null)), table13, "* ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "CuttingUnitID"});
            table14.AddRow(new string[] {
                        "u2",
                        "unit2s"});
#line 14
 testRunner.And("in \'source\' the following units exist:", ((string)(null)), table14, "* ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "CuttingUnitID"});
            table15.AddRow(new string[] {
                        "u2",
                        "unit2d"});
#line 18
 testRunner.And("in \'dest\' the following units exist:", ((string)(null)), table15, "* ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlotNumber",
                        "CuttingUnitCode",
                        "PlotID"});
            table16.AddRow(new string[] {
                        "1",
                        "u2",
                        "plot1_u2s"});
            table16.AddRow(new string[] {
                        "2",
                        "u2",
                        "plot2_u2s"});
#line 23
 testRunner.And("in \'source\' the following plots exist:", ((string)(null)), table16, "* ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "PlotNumber",
                        "CuttingUnitCode",
                        "PlotID"});
            table17.AddRow(new string[] {
                        "1",
                        "u2",
                        "plot1_u2d"});
            table17.AddRow(new string[] {
                        "3",
                        "u2",
                        "plot3_u2d"});
#line 28
 testRunner.And("in \'dest\' the following plots exist:", ((string)(null)), table17, "* ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cutting Unit Conflict Check")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Cutting Units With Plots")]
        [Xunit.TraitAttribute("Description", "Cutting Unit Conflict Check")]
        public virtual void CuttingUnitConflictCheck()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cutting Unit Conflict Check", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 34
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "SourceRecID",
                            "DestRecID",
                            "DownstreamConflictCount"});
                table18.AddRow(new string[] {
                            "unit2s",
                            "unit2d",
                            "1"});
#line 35
 testRunner.Then("Cutting Unit Conflicts Has:", ((string)(null)), table18, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Conflicts With ChoseDest")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Cutting Units With Plots")]
        [Xunit.TraitAttribute("Description", "Resolve Conflicts With ChoseDest")]
        public virtual void ResolveConflictsWithChoseDest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Conflicts With ChoseDest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 40
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
 testRunner.And("I resolve all Cutting Unit conflicts with \'ChoseDest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "CuttingUnitID"});
                table19.AddRow(new string[] {
                            "unit1"});
                table19.AddRow(new string[] {
                            "unit2d"});
#line 44
 testRunner.Then("\'dest\' contains cutting units:", ((string)(null)), table19, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "PlotID"});
                table20.AddRow(new string[] {
                            "plot1_u2d"});
                table20.AddRow(new string[] {
                            "plot3_u2d"});
#line 48
 testRunner.And("\'dest\' contains plots:", ((string)(null)), table20, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Conflicts With ChoseSource")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Cutting Units With Plots")]
        [Xunit.TraitAttribute("Description", "Resolve Conflicts With ChoseSource")]
        public virtual void ResolveConflictsWithChoseSource()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Conflicts With ChoseSource", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 54
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
 testRunner.And("I resolve all Cutting Unit conflicts with \'ChoseSource\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "CuttingUnitID",
                            "CuttingUnitCode"});
                table21.AddRow(new string[] {
                            "unit1",
                            "u1"});
                table21.AddRow(new string[] {
                            "unit2s",
                            "u2"});
#line 58
 testRunner.Then("\'dest\' contains cutting units:", ((string)(null)), table21, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "PlotID"});
                table22.AddRow(new string[] {
                            "plot1_u2s"});
                table22.AddRow(new string[] {
                            "plot2_u2s"});
#line 62
  testRunner.And("\'dest\' contains plots:", ((string)(null)), table22, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Conflict With ModifyDest")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Cutting Units With Plots")]
        [Xunit.TraitAttribute("Description", "Resolve Conflict With ModifyDest")]
        public virtual void ResolveConflictWithModifyDest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Conflict With ModifyDest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 69
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "DestRecID",
                            "CuttingUnitCode"});
                table23.AddRow(new string[] {
                            "unit2d",
                            "u3"});
#line 70
 testRunner.And("I resolve CuttingUnit Conflicts with ModifyDest using:", ((string)(null)), table23, "And ");
#line hidden
#line 73
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "CuttingUnitID",
                            "CuttingUnitCode"});
                table24.AddRow(new string[] {
                            "unit1",
                            "u1"});
                table24.AddRow(new string[] {
                            "unit2s",
                            "u2"});
                table24.AddRow(new string[] {
                            "unit2d",
                            "u3"});
#line 75
 testRunner.Then("\'dest\' contains cutting units:", ((string)(null)), table24, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "PlotID",
                            "CuttingUnitCode"});
                table25.AddRow(new string[] {
                            "plot1_u2s",
                            "u2"});
                table25.AddRow(new string[] {
                            "plot2_u2s",
                            "u2"});
                table25.AddRow(new string[] {
                            "plot1_u2d",
                            "u3"});
                table25.AddRow(new string[] {
                            "plot3_u2d",
                            "u3"});
#line 80
 testRunner.And("\'dest\' contains plots:", ((string)(null)), table25, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Conflict With ModifySource")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Cutting Units With Plots")]
        [Xunit.TraitAttribute("Description", "Resolve Conflict With ModifySource")]
        public virtual void ResolveConflictWithModifySource()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Conflict With ModifySource", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 87
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 88
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "SourceRecID",
                            "CuttingUnitCode"});
                table26.AddRow(new string[] {
                            "unit2s",
                            "u3"});
#line 89
 testRunner.And("I resolve CuttingUnit Conflicts with ModifySource using:", ((string)(null)), table26, "And ");
#line hidden
#line 92
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "CuttingUnitID",
                            "CuttingUnitCode"});
                table27.AddRow(new string[] {
                            "unit1",
                            "u1"});
                table27.AddRow(new string[] {
                            "unit2d",
                            "u2"});
                table27.AddRow(new string[] {
                            "unit2s",
                            "u3"});
#line 94
 testRunner.Then("\'dest\' contains cutting units:", ((string)(null)), table27, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "PlotID",
                            "CuttingUnitCode"});
                table28.AddRow(new string[] {
                            "plot1_u2s",
                            "u3"});
                table28.AddRow(new string[] {
                            "plot2_u2s",
                            "u3"});
                table28.AddRow(new string[] {
                            "plot1_u2d",
                            "u2"});
                table28.AddRow(new string[] {
                            "plot3_u2d",
                            "u2"});
#line 99
 testRunner.And("\'dest\' contains plots:", ((string)(null)), table28, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SyncCuttingUnitsWithPlotsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SyncCuttingUnitsWithPlotsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
