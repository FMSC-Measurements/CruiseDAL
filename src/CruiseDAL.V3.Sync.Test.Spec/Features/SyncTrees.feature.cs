// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CruiseDAL.V3.Sync.Test.Spec.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SyncTreesWithNoLogsFeature : object, Xunit.IClassFixture<SyncTreesWithNoLogsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SyncTrees.feature"
#line hidden
        
        public SyncTreesWithNoLogsFeature(SyncTreesWithNoLogsFeature.FixtureData fixtureData, CruiseDAL_V3_Sync_Test_Spec_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Sync Trees With No Logs", "Sync Tree Records between two cruise files", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "FileAlias"});
            table92.AddRow(new string[] {
                        "source"});
            table92.AddRow(new string[] {
                        "dest"});
#line 5
 testRunner.Given("the following cruise files exist:", ((string)(null)), table92, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode"});
            table93.AddRow(new string[] {
                        "u1"});
            table93.AddRow(new string[] {
                        "u2"});
#line 10
 testRunner.And("in \'source, dest\' the following units exist:", ((string)(null)), table93, "* ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "StratumCode"});
            table94.AddRow(new string[] {
                        "st1"});
            table94.AddRow(new string[] {
                        "st2"});
#line 15
 testRunner.And("in \'source, dest\' the following strata exist:", ((string)(null)), table94, "* ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "SampleGroupCode",
                        "StratumCode"});
            table95.AddRow(new string[] {
                        "sg1",
                        "st1"});
            table95.AddRow(new string[] {
                        "sg2",
                        "st1"});
            table95.AddRow(new string[] {
                        "sg1",
                        "st2"});
            table95.AddRow(new string[] {
                        "sg2",
                        "st2"});
#line 20
 testRunner.And("in \'source, dest\' file the following sample groups exist:", ((string)(null)), table95, "* ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "SpeciesCode"});
            table96.AddRow(new string[] {
                        "sp1"});
#line 27
 testRunner.And("in \'source, dest\' the following species exist:", ((string)(null)), table96, "* ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "StratumCode",
                        "SampleGroupCode",
                        "SpeciesCode",
                        "TreeNumber",
                        "TreeID"});
            table97.AddRow(new string[] {
                        "u1",
                        "st1",
                        "sg1",
                        "sp1",
                        "1",
                        "tree1"});
            table97.AddRow(new string[] {
                        "u1",
                        "st1",
                        "sg1",
                        "sp1",
                        "2",
                        "tree2d"});
            table97.AddRow(new string[] {
                        "u1",
                        "st1",
                        "sg1",
                        "sp1",
                        "3",
                        "tree3"});
#line 31
 testRunner.And("in \'dest\' the following trees exist:", ((string)(null)), table97, "* ");
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        "CuttingUnitCode",
                        "StratumCode",
                        "SampleGroupCode",
                        "SpeciesCode",
                        "TreeNumber",
                        "TreeID"});
            table98.AddRow(new string[] {
                        "u1",
                        "st1",
                        "sg1",
                        "sp1",
                        "1",
                        "tree1"});
            table98.AddRow(new string[] {
                        "u1",
                        "st1",
                        "sg1",
                        "sp1",
                        "2",
                        "tree2s"});
            table98.AddRow(new string[] {
                        "u1",
                        "st1",
                        "sg1",
                        "sp1",
                        "4",
                        "tree4"});
#line 37
 testRunner.And("in \'source\' the following trees exist:", ((string)(null)), table98, "* ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "TreeID",
                        "LogNumber",
                        "LogID"});
            table99.AddRow(new string[] {
                        "tree1",
                        "1",
                        "log1_t1"});
#line 43
 testRunner.And("in \'dest\' the following logs exist:", ((string)(null)), table99, "* ");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        "TreeID",
                        "LogNumber",
                        "LogID"});
            table100.AddRow(new string[] {
                        "tree1",
                        "1",
                        "log1_t1"});
#line 47
 testRunner.And("in \'source\' the following logs exist:", ((string)(null)), table100, "* ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check For Conflicts shows trees with same tree number but different TreeIDs")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Trees With No Logs")]
        [Xunit.TraitAttribute("Description", "Check For Conflicts shows trees with same tree number but different TreeIDs")]
        public virtual void CheckForConflictsShowsTreesWithSameTreeNumberButDifferentTreeIDs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check For Conflicts shows trees with same tree number but different TreeIDs", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 53
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
 testRunner.Then("TreeConflicts has 1 conflict(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
 testRunner.And("TreeConflicts has no downstream conflicts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
 testRunner.And("Log Conflict List has 0 conflict(s)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                            "SourceRecID",
                            "DestRecID"});
                table101.AddRow(new string[] {
                            "tree2s",
                            "tree2d"});
#line 57
 testRunner.And("TreeConflicts records has:", ((string)(null)), table101, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Tree Conflicts With ChoseDest")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Trees With No Logs")]
        [Xunit.TraitAttribute("Description", "Resolve Tree Conflicts With ChoseDest")]
        public virtual void ResolveTreeConflictsWithChoseDest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Tree Conflicts With ChoseDest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 62
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.And("I resolve all tree conflicts with \'ChoseDest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID"});
                table102.AddRow(new string[] {
                            "tree1"});
                table102.AddRow(new string[] {
                            "tree2d"});
                table102.AddRow(new string[] {
                            "tree3"});
                table102.AddRow(new string[] {
                            "tree4"});
#line 66
 testRunner.Then("\'dest\' contains trees:", ((string)(null)), table102, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Tree Conflicts With ChoseSource")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Trees With No Logs")]
        [Xunit.TraitAttribute("Description", "Resolve Tree Conflicts With ChoseSource")]
        public virtual void ResolveTreeConflictsWithChoseSource()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Tree Conflicts With ChoseSource", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 73
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 74
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 75
 testRunner.And("I resolve all tree conflicts with \'ChoseSource\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID"});
                table103.AddRow(new string[] {
                            "tree1"});
                table103.AddRow(new string[] {
                            "tree2s"});
                table103.AddRow(new string[] {
                            "tree3"});
                table103.AddRow(new string[] {
                            "tree4"});
#line 78
 testRunner.Then("\'dest\' contains trees:", ((string)(null)), table103, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Conflict With ModifyDest")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Trees With No Logs")]
        [Xunit.TraitAttribute("Description", "Resolve Conflict With ModifyDest")]
        public virtual void ResolveConflictWithModifyDest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Conflict With ModifyDest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 86
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                            "DestRecID",
                            "TreeNumber"});
                table104.AddRow(new string[] {
                            "tree2d",
                            "5"});
#line 87
 testRunner.And("I resolve tree conflicts with ModifyDest using:", ((string)(null)), table104, "And ");
#line hidden
#line 90
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID",
                            "TreeNumber"});
                table105.AddRow(new string[] {
                            "tree1",
                            "1"});
                table105.AddRow(new string[] {
                            "tree2d",
                            "5"});
                table105.AddRow(new string[] {
                            "tree2s",
                            "2"});
                table105.AddRow(new string[] {
                            "tree3",
                            "3"});
                table105.AddRow(new string[] {
                            "tree4",
                            "4"});
#line 92
 testRunner.Then("\'dest\' contains trees:", ((string)(null)), table105, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resolve Conflict With ModifySource")]
        [Xunit.TraitAttribute("FeatureTitle", "Sync Trees With No Logs")]
        [Xunit.TraitAttribute("Description", "Resolve Conflict With ModifySource")]
        public virtual void ResolveConflictWithModifySource()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve Conflict With ModifySource", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 100
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 101
 testRunner.When("I conflict check \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                            "SourceRecID",
                            "TreeNumber"});
                table106.AddRow(new string[] {
                            "tree2s",
                            "5"});
#line 102
 testRunner.And("I resolve tree conflicts with ModifySource using:", ((string)(null)), table106, "And ");
#line hidden
#line 105
 testRunner.And("I run conflict resolution of \'source\' file against \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
 testRunner.And("sync \'source\' into \'dest\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                            "TreeID",
                            "TreeNumber"});
                table107.AddRow(new string[] {
                            "tree1",
                            "1"});
                table107.AddRow(new string[] {
                            "tree2d",
                            "2"});
                table107.AddRow(new string[] {
                            "tree2s",
                            "5"});
                table107.AddRow(new string[] {
                            "tree3",
                            "3"});
                table107.AddRow(new string[] {
                            "tree4",
                            "4"});
#line 107
 testRunner.Then("\'dest\' contains trees:", ((string)(null)), table107, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SyncTreesWithNoLogsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SyncTreesWithNoLogsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
